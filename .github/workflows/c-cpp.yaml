name: TAMM_CI

on: push

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
        mpi_impl:
          - openmpi
        cxx:
          - g++-10
        cc:
          - gcc-10
        fc:
          - gfortran-10
        include:
          - os: ubuntu-latest
            mpi_impl: openmpi
            cxx: g++-10
            cc: gcc-10
            fc: gfortran-10
          - os: ubuntu-latest
            mpi_impl: openmpi
            cxx: g++-11
            cc: gcc-11
            fc: gfortran-11
          - os: ubuntu-latest
            mpi_impl: openmpi
            cxx: clang++-9
            cc: clang-9
            fc: gfortran-10
      fail-fast: true
    env:
      MPI_IMPL: ${{ matrix.mpi_impl }}
      CXX: ${{ matrix.cxx }}
      CC: ${{ matrix.cc }}
      FC: ${{ matrix.fc }}
    steps:
    - uses: actions/checkout@v3
    - uses: actions/setup-python@v4
      with: 
        python-version: '3.x'
    - name: Check SIMD
      id: get-simd
      run: |
        chmod +x ${GITHUB_WORKSPACE}/.github/workflows/scripts/check_simd.sh
        echo "::set-output name=simd::$(${GITHUB_WORKSPACE}/.github/workflows/scripts/check_simd.sh)"
      shell: bash

    - name: Cache install steps
      id: tamm-cache-install
      uses: actions/cache@v3
      env:
        cache-name: cache-install-steps
      with:
        path: |
          ~/tamm_cache
        key: ${{ runner.os }}-${{ matrix.mpi_impl }}-${{ matrix.cc }}-${{ matrix.cxx }}-simd${{ steps.get-simd.outputs.simd }}-tamm

    - name: install compilers
      run: |
        sudo add-apt-repository -y ppa:ubuntu-toolchain-r/test
        sudo apt-get update
        sudo apt-get -y install $CC $CXX $FC
        $CC    --version
        $CXX   --version
        $FC    --version
        gcov   --version
        git    --version
        python --version
      shell: bash

    - name: get-misc
      run:  sudo apt-get install make wget curl rsync tree software-properties-common libxml2-dev libxslt-dev
    - name: get-blas-lapack
      run:  sudo apt-get install libopenblas-base libopenblas-dev libgslcblas0 libgsl-dev liblapacke liblapacke-dev
    - name: get-boost
      run:  sudo apt-get install libboost-dev libboost-all-dev
    - name: get-eigen3
      run:  sudo apt-get install libeigen3-dev
    - name: get-openmpi
      run: |
        sudo apt-get install openmpi-bin libopenmpi-dev
        mpicc   -show
        mpifort -show
        mpicxx  -show
        mpiexec --version
    - name: get-gcovr
      run:  pip install gcovr
    - name: get-cmake
      run: |
        wget https://github.com/Kitware/CMake/releases/download/v3.22.6/cmake-3.22.6-linux-x86_64.sh
        yes | /bin/sh cmake-3.22.6-linux-x86_64.sh

    - name: find cache
      id: find_cache
      if: steps.tamm-cache-install.outputs.cache-hit == 'true'
      run: |
        export INSTALL_PATH=$GITHUB_WORKSPACE/install
        pwd
        ls -lart
        mkdir -p ${INSTALL_PATH} ~/tamm_cache || true
        rsync -av  ~/tamm_cache/* ${INSTALL_PATH}/.
        ls -lrt ${INSTALL_PATH} || true

    - name: build tamm
      id: build_tamm
      run: |
        export INSTALL_PATH=$GITHUB_WORKSPACE/install
        $GITHUB_WORKSPACE/cmake-3.22.6-linux-x86_64/bin/cmake -H. -Bbuild -DCMAKE_INSTALL_PREFIX=$INSTALL_PATH -DENABLE_COVERAGE=ON
        cd build
        make -j2
        make install
        mkdir -p  ~/tamm_cache || true
        rsync -av --exclude="*tamm*" ${INSTALL_PATH}/* ~/tamm_cache/.

    - name: ctest
      run: |
        cd $GITHUB_WORKSPACE/build
        $GITHUB_WORKSPACE/cmake-3.22.6-linux-x86_64/bin/ctest -VV
    - name: gcovr
      run: |
        cd $GITHUB_WORKSPACE
        gcovr --root . --exclude build --exclude tests --xml ./coverage.xml
        ls -al .
    - uses: codecov/codecov-action@v3
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: ./coverage.xml
